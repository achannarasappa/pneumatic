// Functions that operate on maps
//
// Usage Notes
//
//  • input data - input data to all functions is a map
//  • arity - most functions have a arity of two wherein the function is prepared with all arguments in the first call and the input map is applied in the second call
package maps

// Values accepts a map and returns the values to each key as a slice
//
// Parameters
//
//  • data:     a map
//
// Return Value
//
//  • result:   slice of the values of the input map
//
func Values[TValue any, TKey comparable](data map[TKey]TValue) []TValue {
	out := make([]TValue, 0)
	for _, v := range data {
		out = append(out, v)
	}
	return out
}

// Keys accepts a map and returns the keys to each value as a slice
//
// Parameters
//
//  • data:     a map
//
// Return Value
//
//  • result:   slice of the values of the input map
//
func Keys[TValue any, TKey comparable](data map[TKey]TValue) []TKey {
	out := make([]TKey, 0)
	for k := range data {
		out = append(out, k)
	}
	return out
}
