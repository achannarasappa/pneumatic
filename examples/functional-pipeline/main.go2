package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"os"

	m "github.com/achannarasappa/pneumatic/maps"
	s "github.com/achannarasappa/pneumatic/slice"
	f "github.com/achannarasappa/pneumatic/function"
)

type Post struct {
	ID            string `json:"id"`
	Index         int    `json:"index"`
	IsActive      bool   `json:"isActive"`
	IsVerified    bool   `json:"isVerified"`
	User          User   `json:"user"`
	Email         string `json:"email"`
	Level         string `json:"level"`
	Text          string `json:"text"`
	CreatedAt     string `json:"created_at"`
	Greeting      string `json:"greeting"`
	Favoritefruit string `json:"favoriteFruit"`
}

type User struct {
	Points  int      `json:"points"`
	Name    Name     `json:"name"`
	Friends []Friend `json:"friends"`
	Company string   `json:"company"`
}

type Name struct {
	First string `json:"first"`
	Last  string `json:"last"`
}

type Friend struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type UserLevelPoints struct {
	FirstName   string
	LastName    string
	Level       string
	Points      int
	FriendCount int
}

func getPosts(filename string) ([]Post, error) {

	var posts []Post
	jsonFile, err := os.Open(filename)
	defer jsonFile.Close()

	if err != nil {
		return nil, err
	}

	byteValue, err := ioutil.ReadAll(jsonFile)

	if err != nil {
		return nil, err
	}

	json.Unmarshal(byteValue, &posts)

	return posts, nil

}

var getTopUser = f.Compose3[[]Post, []Post, Post, UserLevelPoints](
	// Sort users by points
	s.SortBy(func (prevPost Post, nextPost Post) bool {
		return prevPost.User.Points > nextPost.User.Points
	}),
	// Get top user by points
	s.Head[Post],
	// Summarize user from post
	func(post Post) UserLevelPoints {
		return UserLevelPoints{
			FirstName:   post.User.Name.First,
			LastName:    post.User.Name.Last,
			Level:       post.Level,
			Points:      post.User.Points,
			FriendCount: len(post.User.Friends),
		}
	},
)

var getTopUsers = f.Compose3[[]Post, map[string][]Post, [][]Post, []UserLevelPoints](
	// Group posts by level
	s.GroupBy(func (v Post) string { return v.Level }),
	// Covert map to values only
	m.Values[[]Post, string],
	// Iterate over each nested group of posts
	s.Map(getTopUser),
)

func main() {

	if posts, err := getPosts("/home/ani/repositories/pneumatic/examples/data.json"); posts != nil {
		topUsers := getTopUsers(posts)
		
		fmt.Printf("%+v\n", topUsers)
	} else {
		fmt.Printf("%+v\n", err)
	}

	fmt.Printf("hello, world\n")
}
