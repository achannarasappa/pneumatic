package function_test

import (
	"reflect"
	"testing"
	
	f "github.com/achannarasappa/pneumatic/function"
)

type TestCase struct {
	description string
	input       interface{}
	output      interface{}
	expected    interface{}
}

func TestCompose(t *testing.T) {

	fn0 := func(v int) int {
		return v + 1
	}
	fn1 := func(v int) int {
		return v + 2
	}
	fn2 := func(v int) int {
		return v + 3
	}

	tests := []TestCase{
		{
			description: "It should compose 2 functions together with a 1 argument to the first function",
			output:      f.Compose2[int, int, int](fn0, fn1)(1),
			expected:    4,
		},
		{
			description: "It should compose 3 functions together with a 1 argument to the first function",
			output:      f.Compose3[int, int, int, int](fn0, fn1, fn2)(1),
			expected:    7,
		},
		{
			description: "It should compose 4 functions together with a 1 argument to the first function",
			output:      f.Compose4[int, int, int, int, int](fn0, fn1, fn2, fn0)(1),
			expected:    8,
		},
	}

	for _, test := range tests {
		if !reflect.DeepEqual(test.output, test.expected) {
			t.Errorf("\n\n%s\n\nOutput: %v\nExpected: %v\n\n", test.description, test.output, test.expected)
		}
	}
}
